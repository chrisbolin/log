{"ast":null,"code":"const path = require(\"path\");\n\nconst fs = require(\"fs\").promises;\n\nconst marked = require(\"marked\");\n\nfunction getDate(filename) {\n  const [year, month, day] = filename.split(\".\")[0].split(\"-\");\n  return `${year}-${month}-${day}T12:00:00.000Z`;\n}\n\nasync function mapArrayAsync(array, callback) {\n  const resultingArray = [];\n\n  for (let index = 0; index < array.length; index++) {\n    resultingArray.push(await callback(array[index], index, array));\n  }\n\n  return resultingArray;\n}\n\nexport async function makeEntries() {\n  const entriesDir = path.join(process.cwd(), \"entries\");\n  const filepaths = (await fs.readdir(entriesDir)).sort().reverse();\n  const entries = await mapArrayAsync(filepaths, filepath => makeEntry(filepath, entriesDir));\n  return entries;\n}\nexport async function makeEntry(filename, directory) {\n  const filepath = path.join(directory, filename);\n  const raw = await fs.readFile(filepath, {\n    encoding: \"utf-8\"\n  });\n  const html = marked(raw);\n  const date = getDate(filename);\n  return {\n    html,\n    date\n  };\n}","map":{"version":3,"sources":["/Users/chris/repos/log/server/entires.js"],"names":["path","require","fs","promises","marked","getDate","filename","year","month","day","split","mapArrayAsync","array","callback","resultingArray","index","length","push","makeEntries","entriesDir","join","process","cwd","filepaths","readdir","sort","reverse","entries","filepath","makeEntry","directory","raw","readFile","encoding","html","date"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAP,CAAcE,QAAzB;;AACA,MAAMC,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;AAEA,SAASI,OAAT,CAAiBC,QAAjB,EAA2B;AACzB,QAAM,CAACC,IAAD,EAAOC,KAAP,EAAcC,GAAd,IAAqBH,QAAQ,CAACI,KAAT,CAAe,GAAf,EAAoB,CAApB,EAAuBA,KAAvB,CAA6B,GAA7B,CAA3B;AACA,SAAQ,GAAEH,IAAK,IAAGC,KAAM,IAAGC,GAAI,gBAA/B;AACD;;AAED,eAAeE,aAAf,CAA6BC,KAA7B,EAAoCC,QAApC,EAA8C;AAC5C,QAAMC,cAAc,GAAG,EAAvB;;AACA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGH,KAAK,CAACI,MAAlC,EAA0CD,KAAK,EAA/C,EAAmD;AACjDD,IAAAA,cAAc,CAACG,IAAf,CAAoB,MAAMJ,QAAQ,CAACD,KAAK,CAACG,KAAD,CAAN,EAAeA,KAAf,EAAsBH,KAAtB,CAAlC;AACD;;AACD,SAAOE,cAAP;AACD;;AAED,OAAO,eAAeI,WAAf,GAA6B;AAClC,QAAMC,UAAU,GAAGnB,IAAI,CAACoB,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,SAAzB,CAAnB;AACA,QAAMC,SAAS,GAAG,CAAC,MAAMrB,EAAE,CAACsB,OAAH,CAAWL,UAAX,CAAP,EAA+BM,IAA/B,GAAsCC,OAAtC,EAAlB;AACA,QAAMC,OAAO,GAAG,MAAMhB,aAAa,CAACY,SAAD,EAAaK,QAAD,IAC7CC,SAAS,CAACD,QAAD,EAAWT,UAAX,CADwB,CAAnC;AAGA,SAAOQ,OAAP;AACD;AAED,OAAO,eAAeE,SAAf,CAAyBvB,QAAzB,EAAmCwB,SAAnC,EAA8C;AACnD,QAAMF,QAAQ,GAAG5B,IAAI,CAACoB,IAAL,CAAUU,SAAV,EAAqBxB,QAArB,CAAjB;AACA,QAAMyB,GAAG,GAAG,MAAM7B,EAAE,CAAC8B,QAAH,CAAYJ,QAAZ,EAAsB;AAAEK,IAAAA,QAAQ,EAAE;AAAZ,GAAtB,CAAlB;AACA,QAAMC,IAAI,GAAG9B,MAAM,CAAC2B,GAAD,CAAnB;AACA,QAAMI,IAAI,GAAG9B,OAAO,CAACC,QAAD,CAApB;AACA,SAAO;AACL4B,IAAAA,IADK;AAELC,IAAAA;AAFK,GAAP;AAID","sourcesContent":["const path = require(\"path\");\nconst fs = require(\"fs\").promises;\nconst marked = require(\"marked\");\n\nfunction getDate(filename) {\n  const [year, month, day] = filename.split(\".\")[0].split(\"-\");\n  return `${year}-${month}-${day}T12:00:00.000Z`;\n}\n\nasync function mapArrayAsync(array, callback) {\n  const resultingArray = [];\n  for (let index = 0; index < array.length; index++) {\n    resultingArray.push(await callback(array[index], index, array));\n  }\n  return resultingArray;\n}\n\nexport async function makeEntries() {\n  const entriesDir = path.join(process.cwd(), \"entries\");\n  const filepaths = (await fs.readdir(entriesDir)).sort().reverse();\n  const entries = await mapArrayAsync(filepaths, (filepath) =>\n    makeEntry(filepath, entriesDir)\n  );\n  return entries;\n}\n\nexport async function makeEntry(filename, directory) {\n  const filepath = path.join(directory, filename);\n  const raw = await fs.readFile(filepath, { encoding: \"utf-8\" });\n  const html = marked(raw);\n  const date = getDate(filename);\n  return {\n    html,\n    date,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}