{"ast":null,"code":"import _regeneratorRuntime from \"/Users/chris/repos/log/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/chris/repos/log/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/chris/repos/log/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar path = require(\"path\");\n\nvar fs = require(\"fs\").promises;\n\nvar marked = require(\"marked\");\n\nfunction getDate(filename) {\n  var _filename$split$0$spl = filename.split(\".\")[0].split(\"-\"),\n      _filename$split$0$spl2 = _slicedToArray(_filename$split$0$spl, 3),\n      year = _filename$split$0$spl2[0],\n      month = _filename$split$0$spl2[1],\n      day = _filename$split$0$spl2[2];\n\n  return \"\".concat(year, \"-\").concat(month, \"-\").concat(day, \"T12:00:00.000Z\");\n}\n\nexport function entries() {\n  return _entries.apply(this, arguments);\n}\n\nfunction _entries() {\n  _entries = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _entries.apply(this, arguments);\n}\n\nexport function makeEntry(_x, _x2) {\n  return _makeEntry.apply(this, arguments);\n}\n\nfunction _makeEntry() {\n  _makeEntry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(filename, directory) {\n    var filepath, raw, html, date;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            filepath = path.join(directory, filename);\n            _context2.next = 3;\n            return fs.readFile(filepath, {\n              encoding: \"utf-8\"\n            });\n\n          case 3:\n            raw = _context2.sent;\n            html = marked(raw);\n            date = getDate(filename);\n            return _context2.abrupt(\"return\", {\n              html: html,\n              date: date\n            });\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _makeEntry.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/chris/repos/log/server/entires.js"],"names":["path","require","fs","promises","marked","getDate","filename","split","year","month","day","entries","makeEntry","directory","filepath","join","readFile","encoding","raw","html","date"],"mappings":";;;;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAP,CAAcE,QAAzB;;AACA,IAAMC,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;AAEA,SAASI,OAAT,CAAiBC,QAAjB,EAA2B;AAAA,8BACEA,QAAQ,CAACC,KAAT,CAAe,GAAf,EAAoB,CAApB,EAAuBA,KAAvB,CAA6B,GAA7B,CADF;AAAA;AAAA,MAClBC,IADkB;AAAA,MACZC,KADY;AAAA,MACLC,GADK;;AAEzB,mBAAUF,IAAV,cAAkBC,KAAlB,cAA2BC,GAA3B;AACD;;AAED,gBAAsBC,OAAtB;AAAA;AAAA;;;sEAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAEP,gBAAsBC,SAAtB;AAAA;AAAA;;;wEAAO,kBAAyBN,QAAzB,EAAmCO,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,YAAAA,QADD,GACYd,IAAI,CAACe,IAAL,CAAUF,SAAV,EAAqBP,QAArB,CADZ;AAAA;AAAA,mBAEaJ,EAAE,CAACc,QAAH,CAAYF,QAAZ,EAAsB;AAAEG,cAAAA,QAAQ,EAAE;AAAZ,aAAtB,CAFb;;AAAA;AAECC,YAAAA,GAFD;AAGCC,YAAAA,IAHD,GAGQf,MAAM,CAACc,GAAD,CAHd;AAICE,YAAAA,IAJD,GAIQf,OAAO,CAACC,QAAD,CAJf;AAAA,8CAKE;AACLa,cAAAA,IAAI,EAAJA,IADK;AAELC,cAAAA,IAAI,EAAJA;AAFK,aALF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["const path = require(\"path\");\nconst fs = require(\"fs\").promises;\nconst marked = require(\"marked\");\n\nfunction getDate(filename) {\n  const [year, month, day] = filename.split(\".\")[0].split(\"-\");\n  return `${year}-${month}-${day}T12:00:00.000Z`;\n}\n\nexport async function entries() {}\n\nexport async function makeEntry(filename, directory) {\n  const filepath = path.join(directory, filename);\n  const raw = await fs.readFile(filepath, { encoding: \"utf-8\" });\n  const html = marked(raw);\n  const date = getDate(filename);\n  return {\n    html,\n    date,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}