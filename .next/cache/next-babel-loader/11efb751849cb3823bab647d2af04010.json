{"ast":null,"code":"import _regeneratorRuntime from \"/Users/chris/repos/log/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/chris/repos/log/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/chris/repos/log/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar path = require(\"path\");\n\nvar fs = require(\"fs\").promises;\n\nvar marked = require(\"marked\");\n\nfunction getDate(filename) {\n  var _filename$split$0$spl = filename.split(\".\")[0].split(\"-\"),\n      _filename$split$0$spl2 = _slicedToArray(_filename$split$0$spl, 3),\n      year = _filename$split$0$spl2[0],\n      month = _filename$split$0$spl2[1],\n      day = _filename$split$0$spl2[2];\n\n  return \"\".concat(year, \"-\").concat(month, \"-\").concat(day, \"T12:00:00.000Z\");\n}\n\nfunction mapArrayAsync(_x, _x2) {\n  return _mapArrayAsync.apply(this, arguments);\n}\n\nfunction _mapArrayAsync() {\n  _mapArrayAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(array, callback) {\n    var resultingArray, index;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            resultingArray = [];\n            index = 0;\n\n          case 2:\n            if (!(index < array.length)) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.t0 = resultingArray;\n            _context.next = 6;\n            return callback(array[index], index, array);\n\n          case 6:\n            _context.t1 = _context.sent;\n\n            _context.t0.push.call(_context.t0, _context.t1);\n\n          case 8:\n            index++;\n            _context.next = 2;\n            break;\n\n          case 11:\n            return _context.abrupt(\"return\", resultingArray);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _mapArrayAsync.apply(this, arguments);\n}\n\nexport function makeEntries() {\n  return _makeEntries.apply(this, arguments);\n}\n\nfunction _makeEntries() {\n  _makeEntries = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var entriesDir, filepaths, entries;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            entriesDir = path.join(process.cwd(), \"entries\");\n            _context2.next = 3;\n            return fs.readdir(entriesDir);\n\n          case 3:\n            filepaths = _context2.sent;\n            _context2.next = 6;\n            return mapArrayAsync(filepaths, function (filepath) {\n              return makeEntry(filepath, entriesDir);\n            });\n\n          case 6:\n            entries = _context2.sent;\n            return _context2.abrupt(\"return\", entries);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _makeEntries.apply(this, arguments);\n}\n\nexport function makeEntry(_x3, _x4) {\n  return _makeEntry.apply(this, arguments);\n}\n\nfunction _makeEntry() {\n  _makeEntry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(filename, directory) {\n    var filepath, raw, html, date;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            filepath = path.join(directory, filename);\n            _context3.next = 3;\n            return fs.readFile(filepath, {\n              encoding: \"utf-8\"\n            });\n\n          case 3:\n            raw = _context3.sent;\n            html = marked(raw);\n            date = getDate(filename);\n            return _context3.abrupt(\"return\", {\n              html: html,\n              date: date\n            });\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _makeEntry.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/chris/repos/log/server/entires.js"],"names":["path","require","fs","promises","marked","getDate","filename","split","year","month","day","mapArrayAsync","array","callback","resultingArray","index","length","push","makeEntries","entriesDir","join","process","cwd","readdir","filepaths","filepath","makeEntry","entries","directory","readFile","encoding","raw","html","date"],"mappings":";;;;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAP,CAAcE,QAAzB;;AACA,IAAMC,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;AAEA,SAASI,OAAT,CAAiBC,QAAjB,EAA2B;AAAA,8BACEA,QAAQ,CAACC,KAAT,CAAe,GAAf,EAAoB,CAApB,EAAuBA,KAAvB,CAA6B,GAA7B,CADF;AAAA;AAAA,MAClBC,IADkB;AAAA,MACZC,KADY;AAAA,MACLC,GADK;;AAEzB,mBAAUF,IAAV,cAAkBC,KAAlB,cAA2BC,GAA3B;AACD;;SAEcC,a;;;;;4EAAf,iBAA6BC,KAA7B,EAAoCC,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,YAAAA,cADR,GACyB,EADzB;AAEWC,YAAAA,KAFX,GAEmB,CAFnB;;AAAA;AAAA,kBAEsBA,KAAK,GAAGH,KAAK,CAACI,MAFpC;AAAA;AAAA;AAAA;;AAAA,0BAGIF,cAHJ;AAAA;AAAA,mBAG8BD,QAAQ,CAACD,KAAK,CAACG,KAAD,CAAN,EAAeA,KAAf,EAAsBH,KAAtB,CAHtC;;AAAA;AAAA;;AAAA,wBAGmBK,IAHnB;;AAAA;AAE4CF,YAAAA,KAAK,EAFjD;AAAA;AAAA;;AAAA;AAAA,6CAKSD,cALT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAQA,gBAAsBI,WAAtB;AAAA;AAAA;;;0EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,YAAAA,UADD,GACcnB,IAAI,CAACoB,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,SAAzB,CADd;AAAA;AAAA,mBAEmBpB,EAAE,CAACqB,OAAH,CAAWJ,UAAX,CAFnB;;AAAA;AAECK,YAAAA,SAFD;AAAA;AAAA,mBAGiBb,aAAa,CAACa,SAAD,EAAY,UAACC,QAAD;AAAA,qBAC7CC,SAAS,CAACD,QAAD,EAAWN,UAAX,CADoC;AAAA,aAAZ,CAH9B;;AAAA;AAGCQ,YAAAA,OAHD;AAAA,8CAMEA,OANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AASP,gBAAsBD,SAAtB;AAAA;AAAA;;;wEAAO,kBAAyBpB,QAAzB,EAAmCsB,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AACCH,YAAAA,QADD,GACYzB,IAAI,CAACoB,IAAL,CAAUQ,SAAV,EAAqBtB,QAArB,CADZ;AAAA;AAAA,mBAEaJ,EAAE,CAAC2B,QAAH,CAAYJ,QAAZ,EAAsB;AAAEK,cAAAA,QAAQ,EAAE;AAAZ,aAAtB,CAFb;;AAAA;AAECC,YAAAA,GAFD;AAGCC,YAAAA,IAHD,GAGQ5B,MAAM,CAAC2B,GAAD,CAHd;AAICE,YAAAA,IAJD,GAIQ5B,OAAO,CAACC,QAAD,CAJf;AAAA,8CAKE;AACL0B,cAAAA,IAAI,EAAJA,IADK;AAELC,cAAAA,IAAI,EAAJA;AAFK,aALF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["const path = require(\"path\");\nconst fs = require(\"fs\").promises;\nconst marked = require(\"marked\");\n\nfunction getDate(filename) {\n  const [year, month, day] = filename.split(\".\")[0].split(\"-\");\n  return `${year}-${month}-${day}T12:00:00.000Z`;\n}\n\nasync function mapArrayAsync(array, callback) {\n  const resultingArray = [];\n  for (let index = 0; index < array.length; index++) {\n    resultingArray.push(await callback(array[index], index, array));\n  }\n  return resultingArray;\n}\n\nexport async function makeEntries() {\n  const entriesDir = path.join(process.cwd(), \"entries\");\n  const filepaths = await fs.readdir(entriesDir);\n  const entries = await mapArrayAsync(filepaths, (filepath) =>\n    makeEntry(filepath, entriesDir)\n  );\n  return entries;\n}\n\nexport async function makeEntry(filename, directory) {\n  const filepath = path.join(directory, filename);\n  const raw = await fs.readFile(filepath, { encoding: \"utf-8\" });\n  const html = marked(raw);\n  const date = getDate(filename);\n  return {\n    html,\n    date,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}