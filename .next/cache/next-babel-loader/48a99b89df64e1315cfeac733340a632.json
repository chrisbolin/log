{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/chris/repos/log/pages/index.js\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport format from \"date-fns/utc/format\";\nimport { makeEntry } from \"../server/entires\";\nexport default function Index({\n  entries\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: entries.map(({\n      html,\n      date\n    }, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: format(new Date(date), \"yyyy-MM-dd\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        dangerouslySetInnerHTML: {\n          __html: html\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 11\n      }, this)]\n    }, idx, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n}\n\nasync function mapArrayAsync(array, callback) {\n  const resultingArray = [];\n\n  for (let index = 0; index < array.length; index++) {\n    resultingArray.push(await callback(array[index], index, array));\n  }\n\n  return resultingArray;\n}\n\nexport async function getStaticProps() {\n  const entriesDir = path.join(process.cwd(), \"entries\");\n  console.log(entriesDir);\n  const filepaths = await fs.promises.readdir(entriesDir);\n  const entries = await mapArrayAsync(filepaths, filepath => makeEntry(filepath, entriesDir));\n  return {\n    props: {\n      entries\n    }\n  };\n}","map":{"version":3,"sources":["/Users/chris/repos/log/pages/index.js"],"names":["path","fs","format","makeEntry","Index","entries","map","html","date","idx","Date","__html","mapArrayAsync","array","callback","resultingArray","index","length","push","getStaticProps","entriesDir","join","process","cwd","console","log","filepaths","promises","readdir","filepath","props"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AAEA,SAASC,SAAT,QAA0B,mBAA1B;AAEA,eAAe,SAASC,KAAT,CAAe;AAAEC,EAAAA;AAAF,CAAf,EAA4B;AACzC,sBACE;AAAA,cACGA,OAAO,CAACC,GAAR,CAAY,CAAC;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAD,EAAiBC,GAAjB,kBACX;AAAA,8BACE;AAAA,kBAAMP,MAAM,CAAC,IAAIQ,IAAJ,CAASF,IAAT,CAAD,EAAiB,YAAjB;AAAZ;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,uBAAuB,EAAE;AAAEG,UAAAA,MAAM,EAAEJ;AAAV;AAA9B;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA,OAAUE,GAAV;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;AAED,eAAeG,aAAf,CAA6BC,KAA7B,EAAoCC,QAApC,EAA8C;AAC5C,QAAMC,cAAc,GAAG,EAAvB;;AACA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGH,KAAK,CAACI,MAAlC,EAA0CD,KAAK,EAA/C,EAAmD;AACjDD,IAAAA,cAAc,CAACG,IAAf,CAAoB,MAAMJ,QAAQ,CAACD,KAAK,CAACG,KAAD,CAAN,EAAeA,KAAf,EAAsBH,KAAtB,CAAlC;AACD;;AACD,SAAOE,cAAP;AACD;;AAED,OAAO,eAAeI,cAAf,GAAgC;AACrC,QAAMC,UAAU,GAAGpB,IAAI,CAACqB,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,SAAzB,CAAnB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,UAAZ;AACA,QAAMM,SAAS,GAAG,MAAMzB,EAAE,CAAC0B,QAAH,CAAYC,OAAZ,CAAoBR,UAApB,CAAxB;AACA,QAAMf,OAAO,GAAG,MAAMO,aAAa,CAACc,SAAD,EAAaG,QAAD,IAC7C1B,SAAS,CAAC0B,QAAD,EAAWT,UAAX,CADwB,CAAnC;AAIA,SAAO;AACLU,IAAAA,KAAK,EAAE;AAAEzB,MAAAA;AAAF;AADF,GAAP;AAGD","sourcesContent":["import path from \"path\";\nimport fs from \"fs\";\nimport format from \"date-fns/utc/format\";\n\nimport { makeEntry } from \"../server/entires\";\n\nexport default function Index({ entries }) {\n  return (\n    <div>\n      {entries.map(({ html, date }, idx) => (\n        <div key={idx}>\n          <div>{format(new Date(date), \"yyyy-MM-dd\")}</div>\n          <div dangerouslySetInnerHTML={{ __html: html }} />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nasync function mapArrayAsync(array, callback) {\n  const resultingArray = [];\n  for (let index = 0; index < array.length; index++) {\n    resultingArray.push(await callback(array[index], index, array));\n  }\n  return resultingArray;\n}\n\nexport async function getStaticProps() {\n  const entriesDir = path.join(process.cwd(), \"entries\");\n  console.log(entriesDir);\n  const filepaths = await fs.promises.readdir(entriesDir);\n  const entries = await mapArrayAsync(filepaths, (filepath) =>\n    makeEntry(filepath, entriesDir)\n  );\n\n  return {\n    props: { entries },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}